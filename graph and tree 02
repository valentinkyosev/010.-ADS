-------------------------
ex.05 DFS graph
-------------------------
using System;
using System.Collections.Generic;

namespace ex._05_DFS_graph
{
    class Graph
    {
        private int V;
        private List<int>[] adj;
        public Graph(int v)
        {
            V = v;
            adj = new List<int>[V];
            for (int i = 0; i < V; i++)
            {
                adj[i] = new List<int>();
            }
        }

        public void AddEdge(int v, int w)
        {
            adj[v].Add(w);
        }

        public void DFSUtil(int v, bool[] visited)
        {
            visited[v] = true; 
            Console.Write(v + " "); 

            foreach (var n in adj[v])
            {
                if (!visited[n])
                {
                    DFSUtil(n, visited);
                }
            }
        }

        public void DFS(int v)
        {
            bool[] visited = new bool[V];
            DFSUtil(v, visited);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Graph g = new Graph(5);
            g.AddEdge(0, 1);
            g.AddEdge(0, 2);
            g.AddEdge(1, 3);
            g.AddEdge(1, 4);

            Console.WriteLine("DFS starting from vertex 0:");
            g.DFS(0);

            Console.WriteLine();

            Console.WriteLine("DFS starting from vertex 2:");
            g.DFS(2);
        }
    }
}

----------------------------------------------
ex.06 BFS graph
---------------------------------------------- 
using System;
using System.Collections.Generic;

namespace ex._06_BFS_graph
{
    class Graph
    {
        private int V;
        private List<int>[] adj;

        public Graph(int v)
        {
            V = v;
            adj = new List<int>[V];
            for (int i = 0; i < V; i++)
            {
                adj[i] = new List<int>();
            }
        }

        public void AddEdge(int v, int w)
        {
            adj[v].Add(w);
        }

        public void BFS(int start)
        {
            bool[] visited = new bool[V];

            Queue<int> queue = new Queue<int>();
            visited[start] = true;
            queue.Enqueue(start);

            while (queue.Count != 0)
            {
                int v = queue.Dequeue();
                Console.Write(v + " ");

                foreach (var n in adj[v])
                {
                    if (!visited[n])
                    {
                        visited[n] = true;
                        queue.Enqueue(n);
                    }
                }
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Graph g = new Graph(5);
            g.AddEdge(0, 1);
            g.AddEdge(0, 2);
            g.AddEdge(1, 3);
            g.AddEdge(1, 4);

            Console.WriteLine("BFS starting from vertex 0:");
            g.BFS(0);

            Console.WriteLine();

            Console.WriteLine("BFS starting from vertex 2:");
            g.BFS(2);
        }
    }
}

------------------------------------------------------------
ex.07 Dijkstras algorithm
------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace ex._07_Dijkstras_algorithm
{
    public class Dijkstra
    {
        private Dictionary<char, Dictionary<char, int>> graph = new Dictionary<char, Dictionary<char, int>>();

        public void AddVertex(char vertex)
        {
            if (!graph.ContainsKey(vertex))
            {
                graph[vertex] = new Dictionary<char, int>();
            }
        }

        public void AddEdge(char fromVertex, char toVertex, int weight)
        {
            if (!graph.ContainsKey(fromVertex))
            {
                AddVertex(fromVertex);
            }
            if (!graph.ContainsKey(toVertex))
            {
                AddVertex(toVertex);
            }

            graph[fromVertex][toVertex] = weight;
            graph[toVertex][fromVertex] = weight;
        }

        public Dictionary<char, int> FindShortestPaths(char startVertex)
        {
            var distances = new Dictionary<char, int>();
            var visited = new HashSet<char>();
            var priorityQueue = new SortedSet<(int, char)>();

            foreach (var vertex in graph.Keys)
            {
                distances[vertex] = int.MaxValue;
            }

            distances[startVertex] = 0;
            priorityQueue.Add((0, startVertex));

            while (priorityQueue.Count > 0)
            {
                var (currentDistance, currentVertex) = priorityQueue.Min;
                priorityQueue.Remove((currentDistance, currentVertex));

                if (currentDistance > distances[currentVertex])
                {
                    continue;
                }

                visited.Add(currentVertex);

                foreach (var (neighbor, weight) in graph[currentVertex])
                {
                    var distance = currentDistance + weight;

                    if (distance < distances[neighbor])
                    {
                        distances[neighbor] = distance;
                        priorityQueue.Add((distance, neighbor));
                    }
                }
            }

            return distances;
        }
    }

    public class Program
    {
        public static void Main()
        {
            var dijkstra = new Dijkstra();

            dijkstra.AddEdge('A', 'B', 10);
            dijkstra.AddEdge('A', 'D', 5);
            dijkstra.AddEdge('B', 'C', 3);
            dijkstra.AddEdge('B', 'E', 5);
            dijkstra.AddEdge('C', 'E', 2);
            dijkstra.AddEdge('C', 'F', 4);
            dijkstra.AddEdge('D', 'E', 1);
            dijkstra.AddEdge('E', 'F', 3);

            var shortestDistances = dijkstra.FindShortestPaths('A');

            foreach (var kvp in shortestDistances)
            {
                Console.WriteLine($"Най-кратък път от A до {kvp.Key} е: {kvp.Value}");
            }
        }
    }
}

----------------------------------------------------------------
ex.08 Implementation - tree
----------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace ex._08_Implementation___tree
{
    public class TreeNode<T>
    {
        public T Data { get; set; }
        public List<TreeNode<T>> Children { get; set; }
        public TreeNode(T data)
        {
            Data = data;
            Children = new List<TreeNode<T>>();
        }

        public void AddChild(TreeNode<T> child)
        {
            Children.Add(child);
        }
    }

    public class Tree<T>
    {
        public TreeNode<T> Root { get; set; }

        public Tree(T rootData)
        {
            Root = new TreeNode<T>(rootData);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Tree<string> tree = new Tree<string>("root");

            TreeNode<string> child1 = new TreeNode<string>("child1");
            TreeNode<string> child2 = new TreeNode<string>("child2");

            tree.Root.AddChild(child1);
            tree.Root.AddChild(child2);

            TreeNode<string> subChild = new TreeNode<string>("subchild");
            child1.AddChild(subChild);

            Console.WriteLine("Дърво:");
            PrintTree(tree.Root, 0);
        }
        static void PrintTree(TreeNode<string> node, int depth)
        {
            Console.WriteLine(new string('-', depth) + node.Data);
            foreach (var child in node.Children)
            {
                PrintTree(child, depth + 1);
            }
        }
    }
}

----------------------------------------------------------
ex.09 Implementation - graph
----------------------------------------------------------
using System;
using System.Collections.Generic;

namespace ex._09_Implementation___graph
{
    public class Graph<T>
    {
        private Dictionary<T, List<T>> adjacencyList;

        public Graph()
        {
            adjacencyList = new Dictionary<T, List<T>>();
        }

        public void AddVertex(T vertex)
        {
            adjacencyList[vertex] = new List<T>();
        }

        public void AddEdge(T source, T destination)
        {
            adjacencyList[source].Add(destination);
            adjacencyList[destination].Add(source);
        }

        public List<T> GetNeighbors(T vertex)
        {
            return adjacencyList[vertex];
        }
    }

    class Program
    {
        static void Main(string[] args)
        {

            Graph<int> graph = new Graph<int>();

            graph.AddVertex(1);
            graph.AddVertex(2);
            graph.AddVertex(3);
            graph.AddVertex(4);

            graph.AddEdge(1, 2);
            graph.AddEdge(1, 3);
            graph.AddEdge(2, 4);

            List<int> neighborsOfOne = graph.GetNeighbors(1);
            Console.WriteLine("Съседи на връх 1:");
            foreach (var neighbor in neighborsOfOne)
            {
                Console.WriteLine(neighbor);
            }
        }
    }
}
