--------------------------------------------------------
ex.01 Graph
--------------------------------------------------------
using System;
using System.Collections.Generic;

public class Graph
{
    private Dictionary<int, List<int>> adjacencyList;

    public Graph()
    {
        adjacencyList = new Dictionary<int, List<int>>();
    }

    public void AddVertex(int vertex)
    {
        adjacencyList[vertex] = new List<int>();
    }

    public void AddEdge(int startVertex, int endVertex)
    {
        if (!adjacencyList.ContainsKey(startVertex))
            AddVertex(startVertex);

        if (!adjacencyList.ContainsKey(endVertex))
            AddVertex(endVertex);

        adjacencyList[startVertex].Add(endVertex);
        adjacencyList[endVertex].Add(startVertex); // за неориентиран граф
    }

    public void PrintGraph()
    {
        foreach (var vertex in adjacencyList.Keys)
        {
            Console.Write($"{vertex}: ");
            foreach (var neighbor in adjacencyList[vertex])
            {
                Console.Write($"{neighbor} ");
            }
            Console.WriteLine();
        }
    }
}
 class Program
{
    static void Main()
    {
        Graph graph = new Graph();

        graph.AddEdge(1, 2);
        graph.AddEdge(1, 3);
        graph.AddEdge(2, 4);
        graph.AddEdge(3, 4);

        graph.PrintGraph();
    }
}

-------------------------------------------------------
ex.02 Tree
-------------------------------------------------------

using System;

public class TreeNode
{
    public int Data;
    public TreeNode Left, Right;

    public TreeNode(int data)
    {
        Data = data;
        Left = Right = null;
    }
}

public class BinaryTree
{
    public TreeNode Root;

    public BinaryTree()
    {
        Root = null;
    }

    public void Insert(int data)
    {
        Root = InsertRecursive(Root, data);
    }

    private TreeNode InsertRecursive(TreeNode root, int data)
    {
        if (root == null)
        {
            root = new TreeNode(data);
            return root;
        }

        if (data < root.Data)
            root.Left = InsertRecursive(root.Left, data);
        else if (data > root.Data)
            root.Right = InsertRecursive(root.Right, data);

        return root;
    }

    public void PrintInOrder()
    {
        PrintInOrderRecursive(Root);
        Console.WriteLine();
    }

    private void PrintInOrderRecursive(TreeNode root)
    {
        if (root != null)
        {
            PrintInOrderRecursive(root.Left);
            Console.Write($"{root.Data} ");
            PrintInOrderRecursive(root.Right);
        }
    }
}

class Program
{
    static void Main()
    {
        BinaryTree tree = new BinaryTree();
        tree.Insert(50);
        tree.Insert(30);
        tree.Insert(70);
        tree.Insert(20);
        tree.Insert(40);
        tree.Insert(60);
        tree.Insert(80);

        Console.WriteLine("In-order traversal:");
        tree.PrintInOrder();
    }
}
----------------------------------------------------
03.Binary tree
----------------------------------------------------
using System;
using System.Collections.Generic;

namespace Binary_tree
{
    /// <summary>
    /// Represents a tree node
    /// </summary>
    /// <typeparam name="T">the type of the values in
    /// nodes</typeparam>
    public class TreeNode<T>
    {

        // Contains the value of the node

        private T value;

        // Show whether the current node has parent

        private bool hasParent;

        // Contains the children of the node

        private List<TreeNode<T>> children;

        /// <summary>
        /// Constructs a tree node
        /// </summary>
        /// <pram name="value">the value of the node </pram>

        public TreeNode(T value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            this.value = value;
            this.children = new List<TreeNode<T>>();

        }
        /// <summary>
        /// The value of the node
        /// </summary>
        public T Value
        {
            get
            {
                return this.value;
            }
            set
            {
                this.value = value;
            }
        }
        /// <summary>
        /// The number of node's children
        /// </summary>
        public int ChildrenCount
        {
            get
            {
                return this.children.Count;
            }
        }
        /// <summary>

        /// Adds child to the node

        /// </summary>

        /// <param name="child">the child to be added</param> 

        public void AddChild(TreeNode<T> child)
        {
            if (child == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            if (child.hasParent)
            {
                throw new ArgumentException("The node already has a parent!");
            }
            child.hasParent = true;

            this.children.Add(child);
        }

        /// <summary>
        /// Gets the child of the node at given index
        /// </summary>
        /// <pram name="index">the index of the desired child</pram>
        /// <returns>the child on the given position</returns>
        public TreeNode<T> GetChild(int index)
        {
            return this.children[index];
        }
    }

    /// <summary>
    /// Represents a tree data structure
    /// </summary>
    /// <typeparam name="T">the type of the values in the 
    /// tree </typeparam>
    
    public class Tree<T>
    {

        // The root of the tree
        private TreeNode<T> root;
        /// <summary>
        /// Constructs the tree
        /// </summary>
        /// <param name="value">the value of the node</param> 
        public Tree(T value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("Cannot insert null value!");
            }
            this.root = new TreeNode<T>(value);
        }

        /// <summary>
        ///Constructs the tree
        /// </summary>
        /// <param name="value">the value of the root node</param>
        /// <pram name="children">the children of the root
        /// node</pram>
        public Tree(T value, params Tree<T>[] children)
            : this(value)
        {
            foreach (Tree<T> child in children)
            {
                this.root.AddChild(child.root);
            }
        }

        /// <summary>
        /// The root node or null if the tree is empty
        /// </summary>
        public TreeNode<T> Root
        {
            get
            {
                return this.root;
            }
        }

        /// <summary>
        /// Traverses and prints tree in Depth
        ///First Search (DFS) manner
        /// </summary>
        /// <param name="root">the root of the tree to be 
        /// traversed</param> 
        /// <param name="spaces">the spaces used for 
        /// representation of the parent-child relation</param>
        private void PrintDFS(TreeNode<T> root, string spaces)
        {
            if (this.root == null)
            {
                return;
            }

            Console.WriteLine(spaces + root.Value);

            TreeNode<T> child = null;

            for (int i = 0; i < root.ChildrenCount; i++)
            {
                child = root.GetChild(i);

                PrintDFS(child, spaces + "   ");
            }
        }

        /// <summary>
        /// Traverses and prints the tree in 
        /// Depth First Search (DFS) manner
        /// </summary>
        public void PrintDFS()
        {
            this.PrintDFS(this.root, string.Empty);
        }
    }

    /// <summary>
    /// Show a sample usage of the Tree<T> class
    /// </summary>
    public static class TreeExample
    {
        static void Main()
        {
            //Create the tree from the sample

            Tree<int> tree =
                new Tree<int>(7,
                new Tree<int>(19,
                new Tree<int>(1),
                new Tree<int>(12),
                new Tree<int>(31)),
                new Tree<int>(21),
                new Tree<int>(14,
                new Tree<int>(23),
                new Tree<int>(6))
                );

            // Traverse and print the tree using Depth-First-Search

            tree.PrintDFS();
            // Console output:
            // 7
            //     19
            //        1
            //          12
            //             31
            //          21
            //        14
            //          23
            //            6

        }
    }
}
----------------------------------------------
04.Binary tree balancing
----------------------------------------------
using System;
using System.Collections.Generic;

namespace _04.Binary_tree_balancing
{

    public class Node
    {
        public int Data;
        public Node Left, Right;

        public Node(int item)
        {
            Data = item;
            Left = Right = null;
        }
    }
    public class BinaryTree
    {
        private Node root;
        public BinaryTree()
        {
            root = null;
        }

        // Метод за вмъкване на възел в дървото
        private Node Insert(Node node, int data)
        {
            if (node == null)
            {
                node = new Node(data);
                return node;
            }
            if (data < node.Data)
                node.Left = Insert(node.Left, data);
            else if (data > node.Data)
                node.Right = Insert(node.Right, data);
            return node;
        }

        // Метод за създаване на балансирано двоично дърво от сортиран масив
        public Node SortedArrayToBST(int[] arr, int start, int end)
        {
            if (start > end)
               return null;

            int mid = (start + end) / 2;
            Node node = new Node(arr[mid]);

            node.Left = SortedArrayToBST(arr, start, mid - 1);
            node.Right = SortedArrayToBST(arr, mid + 1, end);

            return node;
        }

        // Метод за обхождане на дървото в инфиксен ред
        private void InorderTraversal(Node node)
        {
            if (node != null)
            {
                InorderTraversal(node.Left);
                Console.Write(node.Data + " ");
                InorderTraversal(node.Right);
            }
        }

        // Метод за печат на балансираното дърво
        public void PrintBalancedBST()
        {
            InorderTraversal(root);
        }

        // Метод за създаване на балансирано двоично дърво от сортиран масив
        public void CreateBalancedBST(int[] sortedArray)
        {
            int n = sortedArray.Length;
            root = SortedArrayToBST(sortedArray, 0, n - 1);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            BinaryTree tree = new BinaryTree();
            int[] sortedArray = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
            tree.CreateBalancedBST(sortedArray);

            Console.WriteLine("Балансирано двоично дърво:");
            tree.PrintBalancedBST();
        }
    }
}



















