/ex.01 Tree
using System;

public class TreeNode
{
    public int Data;
    public TreeNode Left, Right;

    public TreeNode(int data)
    {
        Data = data;
        Left = Right = null;
    }
}

public class BinaryTree
{
    public TreeNode Root;

    public BinaryTree()
    {
        Root = null;
    }

    public void Insert(int data)
    {
        Root = InsertRecursive(Root, data);
    }

    private TreeNode InsertRecursive(TreeNode root, int data)
    {
        if (root == null)
        {
            root = new TreeNode(data);
            return root;
        }

        if (data < root.Data)
            root.Left = InsertRecursive(root.Left, data);
        else if (data > root.Data)
            root.Right = InsertRecursive(root.Right, data);

        return root;
    }

    public void PrintInOrder()
    {
        PrintInOrderRecursive(Root);
        Console.WriteLine();
    }

    private void PrintInOrderRecursive(TreeNode root)
    {
        if (root != null)
        {
            PrintInOrderRecursive(root.Left);
            Console.Write($"{root.Data} ");
            PrintInOrderRecursive(root.Right);
        }
    }
}

class Program
{
    static void Main()
    {
        BinaryTree tree = new BinaryTree();
        tree.Insert(50);
        tree.Insert(30);
        tree.Insert(70);
        tree.Insert(20);
        tree.Insert(40);
        tree.Insert(60);
        tree.Insert(80);

        Console.WriteLine("In-order traversal:");
        tree.PrintInOrder();
    }
}

--------------------------------------------------------------------------------

ex.02 Graph
using System;
using System.Collections.Generic;

public class Graph
{
    private Dictionary<int, List<int>> adjacencyList;

    public Graph()
    {
        adjacencyList = new Dictionary<int, List<int>>();
    }

    public void AddVertex(int vertex)
    {
        adjacencyList[vertex] = new List<int>();
    }

    public void AddEdge(int startVertex, int endVertex)
    {
        if (!adjacencyList.ContainsKey(startVertex))
            AddVertex(startVertex);

        if (!adjacencyList.ContainsKey(endVertex))
            AddVertex(endVertex);

        adjacencyList[startVertex].Add(endVertex);
        adjacencyList[endVertex].Add(startVertex); // за неориентиран граф
    }

    public void PrintGraph()
    {
        foreach (var vertex in adjacencyList.Keys)
        {
            Console.Write($"{vertex}: ");
            foreach (var neighbor in adjacencyList[vertex])
            {
                Console.Write($"{neighbor} ");
            }
            Console.WriteLine();
        }
    }
}
 class Program
{
    static void Main()
    {
        Graph graph = new Graph();

        graph.AddEdge(1, 2);
        graph.AddEdge(1, 3);
        graph.AddEdge(2, 4);
        graph.AddEdge(3, 4);

        graph.PrintGraph();
    }
}
